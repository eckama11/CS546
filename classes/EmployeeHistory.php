<?php

class EmployeeHistory
    extends GetterSetter
{

    private $_id;
    private $_startDate;
    private $_endDate;
    private $_lastPayPeriodEndDate;
    private $_rank;
    private $_numDeductions;
    private $_salary;

    /**
     * Constructs a new EmployeeHistory object.
     *
     * @param   int           $id           The unique entry ID generated by the database.
     * @param   DateTime      $startDate    First date that this history entry is effective.
     * @param   DateTime|null $endDate      Last date (inclusive) that this history entry is effective
     * @param   DateTime|null $lastPayPeriodEndDate End date of the last pay period that this history entry has been used for.
     * @param   Rank          $rank
     * @param   int           $numDeductions
     * @param   float         $salary
     */
    public function __construct(
            $id, DateTime $startDate, $endDate, $lastPayPeriodEndDate, Rank $rank, $numDeductions, $salary
        )
    {
        if (!is_numeric($id))
            throw new Exception("The \$id parameter must be an integer");
        $this->_id = (int) $id;

        $this->startDate = $startDate;
        $this->endDate = $endDate;
        $this->lastPayPeriodEndDate = $lastPayPeriodEndDate;
        $this->rank = $rank;
        $this->numDeductions = $numDeductions;
        $this->salary = $salary;
    } // __construct

    protected function getId() {
        return $this->_id;
    } // getId

    protected function getStartDate() {
        return $this->_startDate;
    } // getStartDate

    protected function setStartDate(DateTime $newStartDate) {
        if ($newStartDate == null)
            throw new Exception("The startDate cannot be null");

        $this->_startDate = $newStartDate;
    } // setStartDate

    protected function getEndDate() {
        return $this->_endDate;
    } // getEndDate

    protected function setEndDate($newEndDate) {
        if ($newEndDate !== null) {
            if (!($newEndDate instanceof DateTime))
                throw new Exception("Argument 1 passed to ". __METHOD__ ." must be an instance of DateTime, ". (is_object($newEndDate) ? get_class($newEndDate) : gettype($newEndDate)) ." given");

            if ($newEndDate < $this->startDate)
                throw new Exception("The endDate cannot be less than the startDate");
        }

        $this->_endDate = $newEndDate;
    } // setEndDate

    protected function getLastPayPeriodEndDate() {
        return $this->_lastPayPeriodEndDate;
    } // getLastPayPeriodEndDate

    protected function setLastPayPeriodEndDate($newEndDate) {
        if ($newEndDate !== null) {
            if (!($newEndDate instanceof DateTime))
                throw new Exception("Argument 1 passed to ". __METHOD__ ." must be an instance of DateTime, ". (is_object($newEndDate) ? get_class($newEndDate) : gettype($newEndDate)) ." given");

            if ($newEndDate < $this->startDate)
                throw new Exception("The lastPayPeriodEndDate cannot be less than the startDate");
        }

        $this->_lastPayPeriodEndDate = $newEndDate;
    } // setLastPayPeriodEndDate

    protected function getRank() {
        return $this->_rank;
    } // getRank
    
    protected function setRank(Rank $newRank) {
        if ($newRank == null)
            throw new Exception("The rank cannot be null");

		if ($this->salary != null && $this->salary < $newRank->baseSalary) 
        	throw new Exception("Salary must be above rank minimum salary");

        $this->_rank = $newRank;
    } // setRank

    protected function getNumDeductions() {
        return $this->_numDeductions;
    } // getNumDeductions
    
    protected function setNumDeductions($newNumDeductions) {
        if (!is_numeric($newNumDeductions) || ($newNumDeductions < 0))
            throw new Exception("NumDeductions must be an integer greater or equal to 0");
        $this->_numDeductions = (int) $newNumDeductions;
    } // setNumDeductions

    protected function getSalary() {
        return $this->_salary;
    } // getSalary
    
    protected function setSalary($newSalary) {
        if (!is_numeric($newSalary) || ($newSalary < 0))
            throw new Exception("Salary must be a number greater or equal to 0");
        if ($this->rank != null && $newSalary < $this->rank->baseSalary) 
        	throw new Exception("Salary must be above rank minimum salary");
        $this->_salary = (double) $newSalary;
    } // setSalary

    public function __toString() {
        return __CLASS__ ."(id=$this->id, startDate=$this->startDate, endDate=$this->endDate, rank=$this->rank, numDeductions=$this->numDeductions, salary=$this->salary)";
    } // __toString

} // class EmployeeHistory
